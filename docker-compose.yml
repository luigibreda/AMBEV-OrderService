version: '3.8' # Versão da sintaxe do Docker Compose

services:
  # Serviço para o PostgreSQL
  db:
    image: postgres:16-alpine # Imagem oficial do PostgreSQL (versão alpine é mais leve)
    restart: always # Tenta reiniciar o serviço se ele falhar
    environment: # Variáveis de ambiente para configurar o PostgreSQL
      POSTGRES_DB: ambev_orders # Nome do seu banco de dados
      POSTGRES_USER: admin     # Usuário do banco
      POSTGRES_PASSWORD: admin # Senha do banco
    volumes:
      - pgdata:/var/lib/postgresql/data # Volume persistente para os dados do DB
    ports:
      - "5432:5432" # Mapeia a porta 5432 do host para a porta 5432 do contêiner
    healthcheck: # Healthcheck para verificar se o DB está pronto
      test: ["CMD-SHELL", "pg_isready -U admin -d ambev_orders"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Serviço para o RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine # Imagem oficial do RabbitMQ com interface de gestão
    restart: always
    ports:
      - "5672:5672" # Porta padrão para comunicação AMQP
      - "15672:15672" # Porta para a interface de gestão web
    healthcheck: # Healthcheck para verificar se o RabbitMQ está pronto
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Serviço para sua aplicação .NET (OrderService)
  orderservice:
    build:
      context: . # Onde encontrar o Dockerfile (pasta atual)
      dockerfile: Dockerfile # Nome do Dockerfile
    restart: always
    ports:
      - "8080:80" # Mapeia a porta 8080 do host para a porta 80 do contêiner (onde sua app escuta)
      - "8081:443" # Mapeia a porta 8081 do host para a porta 443 do contêiner (para HTTPS, se usar)
    depends_on: # Define a ordem de inicialização e dependências
      db:
        condition: service_healthy # orderservice só inicia quando db estiver saudável
      rabbitmq:
        condition: service_healthy # orderservice só inicia quando rabbitmq estiver saudável
    environment: # Variáveis de ambiente para sua aplicação
      # String de conexão com o DB. Use o nome do serviço 'db' como hostname!
      ConnectionStrings__DefaultConnection: Host=db;Port=5432;Database=ambev_orders;Username=admin;Password=admin
      # Configuração para desabilitar HTTPS no Docker Compose em desenvolvimento
      # Ou configure o HTTPS corretamente no Dockerfile e nas portas se for necessário
      ASPNETCORE_URLS: http://+:80 # Força a aplicação a escutar em HTTP na porta 80
      ASPNETCORE_ENVIRONMENT: Development # Define o ambiente para carregar appsettings.Development.json
    healthcheck: # Healthcheck para verificar se sua aplicação está pronta
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"] # Supondo que você tem um endpoint /health
      interval: 10s
      timeout: 5s
      retries: 5
    # volumes: # Opcional: Para mapear a pasta de logs para o host
    #   - ./logs:/app/logs

# Volumes nomeados para persistência de dados
volumes:
  pgdata: # Os dados do PostgreSQL serão armazenados aqui